/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.21.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { LinkReqObject } from '../models';
// @ts-ignore
import type { LinkRespObject } from '../models';
// @ts-ignore
import type { UnlinkReqObject } from '../models';
// @ts-ignore
import type { UnlinkRespObject } from '../models';
/**
 * AttachmentsControllerApi - axios parameter creator
 * @export
 */
export const AttachmentsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} policyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGitHubRootPath: async (policyName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyName' is not null or undefined
            assertParamExists('getGitHubRootPath', 'policyName', policyName)
            const localVarPath = `/apis/githubOs.halo.run/v1alpha1/attachments/rootPath`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (policyName !== undefined) {
                localVarQueryParameter['policyName'] = policyName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<LinkReqObject>} linkReqObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkGitHubAttachment: async (linkReqObject: Array<LinkReqObject>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkReqObject' is not null or undefined
            assertParamExists('linkGitHubAttachment', 'linkReqObject', linkReqObject)
            const localVarPath = `/apis/githubOs.halo.run/v1alpha1/attachments/link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkReqObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} policyName 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGitHubAttachments: async (policyName: string, path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyName' is not null or undefined
            assertParamExists('listGitHubAttachments', 'policyName', policyName)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('listGitHubAttachments', 'path', path)
            const localVarPath = `/apis/githubOs.halo.run/v1alpha1/attachments/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (policyName !== undefined) {
                localVarQueryParameter['policyName'] = policyName;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} policyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGitHubHaloAttachments: async (policyName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyName' is not null or undefined
            assertParamExists('listGitHubHaloAttachments', 'policyName', policyName)
            const localVarPath = `/apis/githubOs.halo.run/v1alpha1/attachments/haloList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (policyName !== undefined) {
                localVarQueryParameter['policyName'] = policyName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnlinkReqObject} unlinkReqObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkGitHubAttachment: async (unlinkReqObject: UnlinkReqObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unlinkReqObject' is not null or undefined
            assertParamExists('unlinkGitHubAttachment', 'unlinkReqObject', unlinkReqObject)
            const localVarPath = `/apis/githubOs.halo.run/v1alpha1/attachments/unlink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unlinkReqObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttachmentsControllerApi - functional programming interface
 * @export
 */
export const AttachmentsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttachmentsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} policyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGitHubRootPath(policyName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGitHubRootPath(policyName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsControllerApi.getGitHubRootPath']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<LinkReqObject>} linkReqObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkGitHubAttachment(linkReqObject: Array<LinkReqObject>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkRespObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkGitHubAttachment(linkReqObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsControllerApi.linkGitHubAttachment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} policyName 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGitHubAttachments(policyName: string, path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGitHubAttachments(policyName, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsControllerApi.listGitHubAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} policyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGitHubHaloAttachments(policyName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: boolean; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGitHubHaloAttachments(policyName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsControllerApi.listGitHubHaloAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UnlinkReqObject} unlinkReqObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkGitHubAttachment(unlinkReqObject: UnlinkReqObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnlinkRespObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkGitHubAttachment(unlinkReqObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsControllerApi.unlinkGitHubAttachment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttachmentsControllerApi - factory interface
 * @export
 */
export const AttachmentsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttachmentsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AttachmentsControllerApiGetGitHubRootPathRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGitHubRootPath(requestParameters: AttachmentsControllerApiGetGitHubRootPathRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getGitHubRootPath(requestParameters.policyName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttachmentsControllerApiLinkGitHubAttachmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkGitHubAttachment(requestParameters: AttachmentsControllerApiLinkGitHubAttachmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<LinkRespObject> {
            return localVarFp.linkGitHubAttachment(requestParameters.linkReqObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttachmentsControllerApiListGitHubAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGitHubAttachments(requestParameters: AttachmentsControllerApiListGitHubAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listGitHubAttachments(requestParameters.policyName, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttachmentsControllerApiListGitHubHaloAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGitHubHaloAttachments(requestParameters: AttachmentsControllerApiListGitHubHaloAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: boolean; }> {
            return localVarFp.listGitHubHaloAttachments(requestParameters.policyName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttachmentsControllerApiUnlinkGitHubAttachmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkGitHubAttachment(requestParameters: AttachmentsControllerApiUnlinkGitHubAttachmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnlinkRespObject> {
            return localVarFp.unlinkGitHubAttachment(requestParameters.unlinkReqObject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getGitHubRootPath operation in AttachmentsControllerApi.
 * @export
 * @interface AttachmentsControllerApiGetGitHubRootPathRequest
 */
export interface AttachmentsControllerApiGetGitHubRootPathRequest {
    /**
     * 
     * @type {string}
     * @memberof AttachmentsControllerApiGetGitHubRootPath
     */
    readonly policyName: string
}

/**
 * Request parameters for linkGitHubAttachment operation in AttachmentsControllerApi.
 * @export
 * @interface AttachmentsControllerApiLinkGitHubAttachmentRequest
 */
export interface AttachmentsControllerApiLinkGitHubAttachmentRequest {
    /**
     * 
     * @type {Array<LinkReqObject>}
     * @memberof AttachmentsControllerApiLinkGitHubAttachment
     */
    readonly linkReqObject: Array<LinkReqObject>
}

/**
 * Request parameters for listGitHubAttachments operation in AttachmentsControllerApi.
 * @export
 * @interface AttachmentsControllerApiListGitHubAttachmentsRequest
 */
export interface AttachmentsControllerApiListGitHubAttachmentsRequest {
    /**
     * 
     * @type {string}
     * @memberof AttachmentsControllerApiListGitHubAttachments
     */
    readonly policyName: string

    /**
     * 
     * @type {string}
     * @memberof AttachmentsControllerApiListGitHubAttachments
     */
    readonly path: string
}

/**
 * Request parameters for listGitHubHaloAttachments operation in AttachmentsControllerApi.
 * @export
 * @interface AttachmentsControllerApiListGitHubHaloAttachmentsRequest
 */
export interface AttachmentsControllerApiListGitHubHaloAttachmentsRequest {
    /**
     * 
     * @type {string}
     * @memberof AttachmentsControllerApiListGitHubHaloAttachments
     */
    readonly policyName: string
}

/**
 * Request parameters for unlinkGitHubAttachment operation in AttachmentsControllerApi.
 * @export
 * @interface AttachmentsControllerApiUnlinkGitHubAttachmentRequest
 */
export interface AttachmentsControllerApiUnlinkGitHubAttachmentRequest {
    /**
     * 
     * @type {UnlinkReqObject}
     * @memberof AttachmentsControllerApiUnlinkGitHubAttachment
     */
    readonly unlinkReqObject: UnlinkReqObject
}

/**
 * AttachmentsControllerApi - object-oriented interface
 * @export
 * @class AttachmentsControllerApi
 * @extends {BaseAPI}
 */
export class AttachmentsControllerApi extends BaseAPI {
    /**
     * 
     * @param {AttachmentsControllerApiGetGitHubRootPathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsControllerApi
     */
    public getGitHubRootPath(requestParameters: AttachmentsControllerApiGetGitHubRootPathRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsControllerApiFp(this.configuration).getGitHubRootPath(requestParameters.policyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttachmentsControllerApiLinkGitHubAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsControllerApi
     */
    public linkGitHubAttachment(requestParameters: AttachmentsControllerApiLinkGitHubAttachmentRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsControllerApiFp(this.configuration).linkGitHubAttachment(requestParameters.linkReqObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttachmentsControllerApiListGitHubAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsControllerApi
     */
    public listGitHubAttachments(requestParameters: AttachmentsControllerApiListGitHubAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsControllerApiFp(this.configuration).listGitHubAttachments(requestParameters.policyName, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttachmentsControllerApiListGitHubHaloAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsControllerApi
     */
    public listGitHubHaloAttachments(requestParameters: AttachmentsControllerApiListGitHubHaloAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsControllerApiFp(this.configuration).listGitHubHaloAttachments(requestParameters.policyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttachmentsControllerApiUnlinkGitHubAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsControllerApi
     */
    public unlinkGitHubAttachment(requestParameters: AttachmentsControllerApiUnlinkGitHubAttachmentRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsControllerApiFp(this.configuration).unlinkGitHubAttachment(requestParameters.unlinkReqObject, options).then((request) => request(this.axios, this.basePath));
    }
}

