/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.21.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ConfigMap } from '../models';
/**
 * SimpleStringControllerApi - axios parameter creator
 * @export
 */
export const SimpleStringControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} repoName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGitHubOssContents: async (repoName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repoName' is not null or undefined
            assertParamExists('getGitHubOssContents', 'repoName', repoName)
            const localVarPath = `/apis/githubOs.halo.run/v1alpha1/github/oss/contents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (repoName !== undefined) {
                localVarQueryParameter['repoName'] = repoName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGreet: async (arg0: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('getGreet', 'arg0', arg0)
            const localVarPath = `/apis/githubOs.halo.run/v1alpha1/greet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (arg0 !== undefined) {
                localVarQueryParameter['arg0'] = arg0;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/githubOs.halo.run/v1alpha1/hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} policyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGitHubDirectoryContents: async (policyName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyName' is not null or undefined
            assertParamExists('listGitHubDirectoryContents', 'policyName', policyName)
            const localVarPath = `/apis/githubOs.halo.run/v1alpha1/github/oss/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (policyName !== undefined) {
                localVarQueryParameter['policyName'] = policyName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SimpleStringControllerApi - functional programming interface
 * @export
 */
export const SimpleStringControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SimpleStringControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} repoName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGitHubOssContents(repoName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigMap>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGitHubOssContents(repoName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleStringControllerApi.getGitHubOssContents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGreet(arg0: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGreet(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleStringControllerApi.getGreet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleStringControllerApi.getHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} policyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGitHubDirectoryContents(policyName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGitHubDirectoryContents(policyName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleStringControllerApi.listGitHubDirectoryContents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SimpleStringControllerApi - factory interface
 * @export
 */
export const SimpleStringControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SimpleStringControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {SimpleStringControllerApiGetGitHubOssContentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGitHubOssContents(requestParameters: SimpleStringControllerApiGetGitHubOssContentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfigMap> {
            return localVarFp.getGitHubOssContents(requestParameters.repoName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SimpleStringControllerApiGetGreetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGreet(requestParameters: SimpleStringControllerApiGetGreetRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getGreet(requestParameters.arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SimpleStringControllerApiListGitHubDirectoryContentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGitHubDirectoryContents(requestParameters: SimpleStringControllerApiListGitHubDirectoryContentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listGitHubDirectoryContents(requestParameters.policyName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getGitHubOssContents operation in SimpleStringControllerApi.
 * @export
 * @interface SimpleStringControllerApiGetGitHubOssContentsRequest
 */
export interface SimpleStringControllerApiGetGitHubOssContentsRequest {
    /**
     * 
     * @type {string}
     * @memberof SimpleStringControllerApiGetGitHubOssContents
     */
    readonly repoName: string
}

/**
 * Request parameters for getGreet operation in SimpleStringControllerApi.
 * @export
 * @interface SimpleStringControllerApiGetGreetRequest
 */
export interface SimpleStringControllerApiGetGreetRequest {
    /**
     * 
     * @type {string}
     * @memberof SimpleStringControllerApiGetGreet
     */
    readonly arg0: string
}

/**
 * Request parameters for listGitHubDirectoryContents operation in SimpleStringControllerApi.
 * @export
 * @interface SimpleStringControllerApiListGitHubDirectoryContentsRequest
 */
export interface SimpleStringControllerApiListGitHubDirectoryContentsRequest {
    /**
     * 
     * @type {string}
     * @memberof SimpleStringControllerApiListGitHubDirectoryContents
     */
    readonly policyName: string
}

/**
 * SimpleStringControllerApi - object-oriented interface
 * @export
 * @class SimpleStringControllerApi
 * @extends {BaseAPI}
 */
export class SimpleStringControllerApi extends BaseAPI {
    /**
     * 
     * @param {SimpleStringControllerApiGetGitHubOssContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleStringControllerApi
     */
    public getGitHubOssContents(requestParameters: SimpleStringControllerApiGetGitHubOssContentsRequest, options?: RawAxiosRequestConfig) {
        return SimpleStringControllerApiFp(this.configuration).getGitHubOssContents(requestParameters.repoName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SimpleStringControllerApiGetGreetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleStringControllerApi
     */
    public getGreet(requestParameters: SimpleStringControllerApiGetGreetRequest, options?: RawAxiosRequestConfig) {
        return SimpleStringControllerApiFp(this.configuration).getGreet(requestParameters.arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleStringControllerApi
     */
    public getHello(options?: RawAxiosRequestConfig) {
        return SimpleStringControllerApiFp(this.configuration).getHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SimpleStringControllerApiListGitHubDirectoryContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleStringControllerApi
     */
    public listGitHubDirectoryContents(requestParameters: SimpleStringControllerApiListGitHubDirectoryContentsRequest, options?: RawAxiosRequestConfig) {
        return SimpleStringControllerApiFp(this.configuration).listGitHubDirectoryContents(requestParameters.policyName, options).then((request) => request(this.axios, this.basePath));
    }
}

